package edu.iu.cnets.klatsch.lang;

import edu.iu.cnets.klatsch.exception.EvaluationException;
import edu.iu.cnets.klatsch.expression.Expression;


/**
 * This is the base class of all values, which are generated by the evaluation of {@link Expression} objects.
 */
public abstract class Value
{
	abstract public String toString();
	

	/**
	 * Takes a test that we need to be true of an argument and ensures that it is.
	 * 
	 * @param test  the results of the test
	 * @throws EvaluationException if the test failed 
	 */
	static void require(boolean test)
	throws EvaluationException
	{
		if (!test)
			throw new EvaluationException("illegal argument");
	}
	
	
	/**
	 * Requires the given array of arguments to have between minCount and maxCount elements.
	 * This is a convenience method for method and primitive definitions.
	 * 
	 * @param args      the array of arguments
	 * @param minCount  the minimum number of arguments
	 * @param maxCount  the maximum number of arguments
	 * @throws EvaluationException if the count is bad
	 */
	public static void requireCount(Value[] args, int minCount, int maxCount)
	throws EvaluationException
	{
		if ((args.length < minCount) || (args.length > maxCount))
			throw new EvaluationException("bad argument count");
	}
	
	
	/**
	 * Requires this value to be a member of one of the given subclasses.  We return ourselves to support
	 * call chaining.
	 * 
	 * @param type  the classes we must be a member of
	 * @return this
	 * @throws EvaluationException if the types don't match
	 */
	public Value requireType(Class<?> ... type)
	throws EvaluationException
	{
		for (Class<?> c : type)
			if (c.isInstance(this))
				return this;

		throw new EvaluationException("type mismatch");	
	}

	
	/**
	 * Returns a JSON representation of this value.  Not all values will have a useful JSON representation
	 * (especially streams and closures), so we include a non-useful representation here as the default
	 * behavior.
	 * 
	 * @return the JSON representation
	 */
	public String toJson()
	{
		return "\"" + this.toString() + "\"";
	}
}
