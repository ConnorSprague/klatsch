// Provides timing information for graph analysis so that we can locate
// the bottlenecks in statistics production.

f = feed("Truthy");
f.connect();

id   = args.get(1).num();
meme = f.memelabel(id);

println("Evaluating performance of meme #", id, " (", meme, ")");
println();

report = proc (what, ls)  println("Time for ", what, ": ", ls.get(0), " sec");

g = graph();
report("building graph        ", bench(proc ()
  begin
    events = f.memeevents(id);
    for event in events
      for e in event.edges()
        g.add(e);
    f.update_trust(g);
  end));

actor = 0;
report("getting actor graph   ", bench(proc () actor = g.actorgraph()));
report("clustering coefficient", bench(proc () actor.cc()));
report("component analysis    ", bench(proc () actor.comp_count()));
// report("diameter              ", bench(proc () actor.diameter()));
report("modularity            ", bench(proc () actor.modularity()));
// report("path length           ", bench(proc () actor.pathlength()));
println();

ls = 0;
report("getting k_in          ", bench(proc () ls = actor.ki().list()));
report("k_in stddev           ", bench(proc () ls.std()));
report("k_in max              ", bench(proc () ls.max()));
report("k_in skew             ", bench(proc () ls.skew()));
