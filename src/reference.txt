Quick Reference Guide to Klatsch
=======================================================================


---[Primitives]--------------------------------------------------------

number abs    (number n)                  Returns absolute value of n
number acos   (number n)                  Returns arc cosine of n
node   anode  (number n)                  Returns actor node with ID n 
number asin   (number n)                  Returns arc sine of n
number atan   (number n)                  Returns arc tangent of n
number atan2  (number y, number x)        Returns arc tangent of y/x
number ceil   (number n)                  Returns ceiling of n
null   close  (number i)                  Closes widget with ID i         *** DEPRECATED ***
number cos    (number n)                  Returns cosine of n
edge   edge   (node n1, node n2)          Creates a new from n1 to n2 (when = now, weight = 1)
edge   edge   (n1, n2, number w)                  Also gives weight
edge   edge   (n1, n2, w, number t)               Also gives trust weight
edge   edge   (n1, n2, number s, number e, w, t)  Also gives start and end times
null   exec   (string s)                  Executes script s
null   exit   ()                          Exits the interpreter
number exp    (number n)                  Returns e^n
feed   feed   (string s)                  Returns new feed of type s
feed   feed   (string s, dict d)          Returns new feed of type s with config parameters
number floor  (number n)                  Returns floor of n
graph  graph  ()                          Creates new, empty graph
graph  grapher(number n, number p)        Creates new Erdos-Renyi random graph
string json   (value v)                   Converts value to JSON format
list   list   (number n)                  Creates list with n slots
number log    (number n)                  Returns log base e of n
number log10  (number n)                  Returns log base 10 of n
number mnode  (number n)                  Returns meme node with ID n
null   print  (value v1, ...)             Prints values v1, ..., to the console
null   println(value v1, ...)             Prints values v1, ..., and \n to the console
queue  queue  ()                          Creates new, empty queue
number random ()                          Returns random number in [0,1)
number random (number n)                  Returns random number in [0,n)
stream range  (number e)                  Returns stream with range [1,e]
stream range  (number s, number e)        Returns stream with range [s,e]
stream range  (number s, number e, number step)  Returns stream with range [s, s+step, ... e]
number round  (number n)                  Returns n to nearest integer
number sign   (number n)                  Returns sign of n (-1, 0, or 1)
number sin    (number n)                  Returns sine of n
number sqrt   (number n)                  Returns square root of n
stack  stack  ()                          Creates new, empty stack
number tan    (number n)                  Returns tangent of n
?      test   (?)                         Hook for testing new primitives


---[Closure]-----------------------------------------------------------

stream X.stream()                         Converts closure into a stream


---[Dictionary]--------------------------------------------------------

dict   X.delete(string s)                 Removes any association for s 	
bool   X.has   (string s)                 Tests whether X has an association for s
value  X.get   (string s)                 Returns values associated with s
stream X.keys  ()                         Returns stream of keys
value  X.set   (string s, value v)        Associates s with the value v, returns v
stream X.values()                         Returns stream of values	


---[Edge]--------------------------------------------------------------

node   X.dst  ()                          Returns destination node
number X.e    ()                          Returns end time for edge
number X.s    ()                          Returns start time for edge
node   X.src  ()                          Returns source node
number X.trust()                          Returns trusted weight of edge
number X.w    ()                          Returns weight of edge


---[Event]-------------------------------------------------------------

stream X.edges()                          Returns stream of edges
number X.time ()                          Returns the timestamp


---[Feed]--------------------------------------------------------------

stream X.actorevents(number n)            Returns a stream of events for actor n
stream X.actorevents(number n, number t1, number t2)  Adds time range to actorevents()
string X.actorid    (string s)            Returns the ID of actor with label s
string X.actorlabel (number n)            Returns the label of actor with ID n
bool   X.connect    ()                    Connects the feed to its data source
stream X.memeevents (number n)            Returns a stream of events for meme n
stream X.memeevents (number n, number t1, number t2)  Adds time range to memeevents()
string X.memeid     (string s)            Returns the ID of meme with label s
string X.memelabel  (number n)            Returns the label of meme with ID n
stream X.memelinks  (number n)            Returns memes connected to the meme with ID n
string X.name       ()                    Returns the name
void   X.update     (graph g)             Applies trust update rules to a graph	


---[Graph]-------------------------------------------------------------

graph  X.actorgraph    ()                 Returns graph with actor-actor edges
graph  X.actormemegraph()                 Returns graph with actor-meme edges
graph  X.add           (edge e)           Adds the given edge
number X.cc            ()                 Returns mean clustering coefficient
graph  X.comp          (number n)         Returns component #n (0-based)
number X.comp_count    ()                 Returns number of components
number X.diameter      ()                 Returns maximal finite diameter
number X.e             ()                 Returns number of edges
stream X.edges         ()                 Returns stream of all edges
stream X.ei            (node n)           Returns stream of edges ending at n
stream X.eo            (node n)           Returns stream of edges starting at n
edge   X.get           (edge e)           Retrieves e from the graph
bool   X.has           (edge e)           Tests whether e is in the graph
bool   X.has           (node n)           Tests whether n is in the graph 
stream X.ki            ()                 Returns stream of in-degrees of nodes
number X.ki            (node n)           Returns in-degree of node n
number X.kipower       ()                 Returns power-law exponent of in-degree dist.
stream X.ko            ()                 Returns stream of out-degrees of nodes            
number X.ko            (node n)           Returns out-degree of node n
number X.kopower       ()                 Returns power-law exponent of out-degree dist.
graph  X.memegraph     ()                 Returns graph with meme-meme edges
number X.modularity    ()                 Returns mean modularity measure (?)
number X.n             ()                 Returns number of nodes
number X.ni            ()                 Returns number of destination nodes
number X.no            ()                 Returns number of source nodes
stream X.nodes         ()                 Returns stream of all nodes
number X.pathlength    ()                 Returns mean path length
stream X.si            ()                 Returns stream of in-strengths of nodes
number X.si            (node n)           Returns in-strength of node n
stream X.so            ()                 Returns stream of out-strengths of nodes
number X.so            (node n)           Returns out-strength of node n
graph  X.trusted       ()                 Returns the trusted subgraph


---[List]--------------------------------------------------------------

list   X.filter   (closure p)             Returns members for which p is true
value  X.get      (number n)              Returns element n
list   X.join     (list ls)               Returns concatenation of X and ls
number X.len      ()                      Returns length
list   X.map      (closure p)             Calls p on each element
number X.max      ()                      Finds maximum of list
number X.max_index()                      Finds index of maximum in list
number X.mean     ()                      Finds mean of numeric list
number X.min      ()                      Finds minimum of list
number X.min_index()                      Finds index of minimum in list
value  X.reduce   (closure p, value acc)  Repeats acc = p(x, acc) for each element
list   X.set      (number n, value v)     Sets element n to v
number X.skew     ()                      Finds skewness of numeric list
list   X.slice    (number n1, number n2)  Returns slice from n1 to n2, inclusive
list   X.sort     ()                      Sorts numeric list in-place
list   X.sort     (closure p)             Sorts list in-place using sorting proc p 
number X.std      ()                      Finds standard deviation of numeric list
stream X.stream   ()                      Converts list into a stream
number X.sum      ()                      Finds sum of numeric list


---[Node]--------------------------------------------------------------

bool   X.actor()                          Tests whether this node is an actor
number X.id   ()                          Returns ID
bool   X.meme ()                          Tests whether this node is a meme


---[Number]------------------------------------------------------------

string X.str()                            Converts to string


---[Queue]-------------------------------------------------------------

value  X.deq   ()                         Dequeue head element
bool   X.empty ()                         Tests if queue is empty
queue  X.enq   (value v)                  Enqueues v to end of queue
number X.len   ()                         Returns length of queue
list   X.list  ()                         Converts queue to list
value  X.peek  ()                         Returns head elements without dequeuing
stream X.stream()                         Converts queue to stream


---[Stack]-------------------------------------------------------------

bool   X.empty ()                         Tests if stack is empty
number X.len   ()                         Returns length of stack
list   X.list  ()                         Converts stack to list
value  X.peek  ()                         Returns top element without popping
value  X.pop   ()                         Pops top element
stack  X.push  (value v)                  Pushes v onto stack	
stream X.stream()	                      Converts stack to stream


---[Stream]------------------------------------------------------------

value  X.current()                        Returns current value
bool   X.done   ()                        Tests for end of stream
stream X.filter (closure p)               Applies procedure filter
value  X.get    ()                        Returns next item
stream X.limit  (number n)                Creates element-limited stream
list   X.list   ()                        Converts stream into list (if finite!)
stream X.map    (closure p)               Applies procedural mapping
bool   X.more   ()                        Tests for more values
stream X.reduce (closure p, value acc)    Applies procedural reduction


---[String]------------------------------------------------------------

string X.cap     ()                       Capitalizes first letter
bool   X.contains(string s)               Tests for containment of s	
number X.len     ()                       Returns length
list   X.list    ()                       Converts string to list of one-character strings
string X.lower   ()                       Returns lowercase version
bool   X.matches (string r)               Tests for match against regex r
number X.num     ()                       Converts string to number
list   X.split   (string r)               Splits string using regex r
list   X.split   (string r, number n)     Splits string at most n pieces using regex r	
string X.substr  (number n1)              Returns substring from n1 to end
string X.substr  (number n1, number n2)   Returns substring from n1 to n2-1
string X.trim    ()                       Strips leading and trailing whitespace
string X.upper   ()                       Returns uppercase version
